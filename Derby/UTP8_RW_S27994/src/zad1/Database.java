package zad1;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.math.BigDecimal;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Locale;

public class Database {
    private final String URL;
    private final TravelData TRAVEL_DATA;

    public Database(String URL, TravelData TRAVEL_DATA) {
        this.URL = URL;
        this.TRAVEL_DATA = TRAVEL_DATA;
    }

    void create() {
        try {
            Connection conn = DriverManager.getConnection(URL);
            Statement stmt = conn.createStatement();
            String tableName = "Offer";
            if (!tableExists(conn, tableName)) {
                stmt.executeUpdate("CREATE TABLE Offer (" +
                        "ID INT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)," +
                        "Country VARCHAR(255) NOT NULL," +
                        "Departure_date DATE NOT NULL," +
                        "Return_Date DATE NOT NULL," +
                        "Place VARCHAR(30) NOT NULL," +
                        "Price DECIMAL(10,2) NOT NULL," +
                        "Currency VARCHAR(3) NOT NULL," +
                        "PRIMARY KEY(ID))");
                insertData(conn);
            }
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private boolean tableExists(Connection conn, String tableName) throws SQLException {
        DatabaseMetaData dbm = conn.getMetaData();
        ResultSet tables = dbm.getTables(null, null, tableName.toUpperCase(), null);
        return tables.next();
    }

    private void insertData(Connection conn) {
        try {
            String insertSql = "INSERT INTO Offer (Country, Departure_Date, Return_Date, Place, Price, Currency)" +
                    "VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = conn.prepareStatement(insertSql);
            String dateFormat = "yyyy-MM-dd";
            SimpleDateFormat df = (SimpleDateFormat) DateFormat.getDateInstance();
            df.applyPattern(dateFormat);
            Locale def = Locale.getDefault();
            for (Offer offer : TRAVEL_DATA.getOffersList()) {
                preparedStatement.setString(1, TravelData.Translator.translateCountry(offer.getLocale(),
                                                                                                    def,
                                                                                                    offer.getCountry()));
                preparedStatement.setDate(2, Date.valueOf(df.format(offer.getDepartureDate())));
                preparedStatement.setDate(3, Date.valueOf(df.format(offer.getReturnDate())));
                preparedStatement.setString(4, TravelData.Translator.translatePlace(def, offer.getPlace()));
                preparedStatement.setBigDecimal(5, BigDecimal.valueOf(offer.getPrice()));
                preparedStatement.setString(6, offer.getCurrency());
                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    void showGui() {
        try (Connection conn = DriverManager.getConnection(URL)) {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM Offer");

            JTable table = new JTable(buildTableModel(rs, Locale.getDefault()));

            JComboBox<String> localeComboBox = new JComboBox<>(Arrays.stream(Locale.getAvailableLocales()).map(l -> l.getDisplayLanguage()).toArray(String[]::new));

            localeComboBox.addActionListener(e -> {
                Locale locale = Arrays.stream(Locale.getAvailableLocales())
                        .filter(l -> l.getDisplayLanguage().equals(localeComboBox.getSelectedItem()))
                        .findFirst()
                        .orElse(Locale.getDefault());
                try (Connection connection = DriverManager.getConnection(URL)) {
                    Statement statement = connection.createStatement();
                    table.setModel(buildTableModel(statement.executeQuery("SELECT * FROM Offer"), locale));

                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            });

            JFrame frame = new JFrame("Offers");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setLayout(new BorderLayout());
            frame.add(new JScrollPane(table), BorderLayout.CENTER);
            frame.add(localeComboBox, BorderLayout.NORTH);
            frame.pack();
            frame.setVisible(true);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private DefaultTableModel buildTableModel(ResultSet rs, Locale locale) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();

        List<String> columnNames = new ArrayList<>();
        int columnCount = metaData.getColumnCount();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        List<List<Object>> data = new ArrayList<>();
        while (rs.next()) {
            List<Object> row = new ArrayList<>();
            row.add(rs.getInt(1));
            row.add(TravelData.Translator.translateCountry(Locale.getDefault(), locale, rs.getString(2)));
            row.add(TravelData.Translator.formatDate(rs.getDate(3), TRAVEL_DATA.getDateFormat()));
            row.add(TravelData.Translator.formatDate(rs.getDate(4), TRAVEL_DATA.getDateFormat()));
            row.add(TravelData.Translator.translatePlace(locale, rs.getString(5)));
            row.add(TravelData.Translator.formatPrice(locale, rs.getBigDecimal(6).doubleValue()));
            row.add(rs.getString(7));
            data.add(row);
        }

        return new DefaultTableModel(data.stream().map(l -> l.toArray()).toArray(Object[][]::new), columnNames.toArray()) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
    }
}